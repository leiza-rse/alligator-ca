BB <- st_bbox(BarmoseI.pp)
Bpp <- ppp(BarmoseI.pp)
Bpp <- sf::as_Spatial(BarmoseI.pp)
Bpp <-SpatialPoints(BarmoseI.pp$North, BarmoseI.pp$East, proj4string=CRS(as.character(NA)))
library(sp)
Bpp <-SpatialPoints(BarmoseI.pp$North, BarmoseI.pp$East, proj4string=CRS(as.character(NA)))
Bpp <-SpatialPoints(c(BarmoseI.pp$North, BarmoseI.pp$East), proj4string=CRS(as.character(NA)))
B2 <- B[,c(1:2]
B2 <- B[,c(1:2)]
Bpp <-SpatialPoints(B2, proj4string=CRS(as.character(NA)))
BB <- st_bbox(Bpp)
bg <-readOGR(dsn = "/home/sophie/ownCloudBonn/Percolation/bsp-skript/geofabrik/", layer = "gis_osm_landuse_a_free_1")
library(sf)
bg <-readOGR(dsn = "/home/sophie/ownCloudBonn/Percolation/bsp-skript/geofabrik/", layer = "gis_osm_landuse_a_free_1")
library(percopackage)
library(archdata)
data("BarmoseI.pp")
B <- BarmoseI.pp
B$ID <- c(1:473)
B <- B[,c(1:2,5)]
colnames(B) <- c("Easting", "Northing", "PlcIndex")
B2 <- B[,c(1:2)]
library(sf)
library(sp)
Bpp <-SpatialPoints(B2, proj4string=CRS(as.character(NA)))
BB <- st_bbox(Bpp)
bg <-readOGR(dsn = "/home/sophie/ownCloudBonn/Percolation/bsp-skript/geofabrik/", layer = "gis_osm_landuse_a_free_1")
library(rgdal)
bg <-readOGR(dsn = "/home/sophie/ownCloudBonn/Percolation/bsp-skript/geofabrik/", layer = "gis_osm_landuse_a_free_1")
install.packages("maps")
gClip <- function(shp, bb){
if(class(bb) == "matrix") b_poly <- as(extent(as.vector(t(bb))), "SpatialPolygons")
else b_poly <- as(extent(bb), "SpatialPolygons")
gIntersection(shp, b_poly, byid = TRUE)
}
bg <- gClip(bg, BB)
library(percopackage)
library(archdata)
data("BarmoseI.pp")
B <- BarmoseI.pp
B$ID <- c(1:473)
B <- B[,c(1:2,5)]
colnames(B) <- c("Easting", "Northing", "PlcIndex")
B2 <- B[,c(1:2)]
library(sf)
library(sp)
Bpp <-SpatialPoints(B2, proj4string=CRS(as.character(NA)))
BB <- st_bbox(Bpp)
bg <-readOGR(dsn = "/home/sophie/ownCloudBonn/Percolation/bsp-skript/geofabrik/", layer = "gis_osm_landuse_a_free_1")
bg <- gClip(bg, BB)
library(raster)
bg <- gClip(bg, BB)
clip_spdf <- function(shp, bb, byid = T){
if(class(bb)[1] == "Extent") e <- bbox(bb) else bb <- e
e <- rgeos::readWKT(paste('POLYGON((',e[1,1],e[2,1],',',e[1,1],e[2,2],',',e[1,2],e[2,2],',',e[1,2],e[2,1],',',e[1,1],e[2,1],'))',collapse=' '))
e@proj4string <- shp@proj4string
rgeos::gIntersection(shp, e, byid=byid)
}
bg <- clip_spdf(bg, BB)
out <- crop(bg, extent(BB[1], BB[2], BB[3], BB[4]))
out <- crop(bg, Bpp))
out <- crop(bg, Bpp)
install.packages
install.packages(rgeos)
install.packages("rgeos")
out <- crop(bg, Bpp)
library(rgeos)
install.packages("rgeos")
install.packages('rgeos')
library(percopackage)
library(archdata)
data("BarmoseI.pp")
B <- BarmoseI.pp
B$ID <- c(1:473)
B <- B[,c(1:2,5)]
colnames(B) <- c("Easting", "Northing", "PlcIndex")
B2 <- B[,c(1:2)]
library(sf)
library(sp)
Bpp <-SpatialPoints(B2, proj4string=CRS(as.character(NA)))
BB <- st_bbox(Bpp)
library(rgdal)
bg <-readOGR(dsn = "/home/sophie/ownCloudBonn/Percolation/bsp-skript/geofabrik/", layer = "gis_osm_landuse_a_free_1")
library(raster)
library(rgeos)
out <- crop(bg, Bpp)
data(Arnhofen)
A <- data(Arnhofen)
plot(A)
A <- Arnhofen
plot(A)
plot(A$points)
A <-Arnhofen$points
plot(A)
percolate(A)
A$plcIndex <- c(1:216)
colnames(A) <- c("Easting", "Northing", "PlcIndex")
percolate(A,limit = 70, radius_unit = 1, upper_radius = 50, lower_radius = 10, step_value = 10))
percolate(A,limit = 70, radius_unit = 1, upper_radius = 50, lower_radius = 10, step_value = 10)
mapClusters(shape = Arnhofen$window,  map_name = "Arnhofen", source_file_name = "Source file ist archdata, Arnhofen", dpi = 200)
win <- Arnhofen$window
win <- coord(Arnhofen$window)
win <- sp::coord(Arnhofen$window)
win <- sf::coord(Arnhofen$window)
win <- rgdal::coord(Arnhofen$window)
win <- spatstat::coord(Arnhofen$window)
plot(Arnhofen$window)
plot(Arnhofen$window$x, Arnhofen$window$y)
points(Arnhofen$points)
win  <- st_cast(Arnhofen$window, "POLYGON")
Awin <- SpatialPoints(Arnhofen$window)
win <- st_cast(Awin, "POLYGON")
Awin <- st_multipoint(Arnhofen$window)
Awin <- st_multipoint(Arnhofen$window$x, Arnhofen$window$y)
Awin <- st_multipoint(as.matrix(Arnhofen$window$x, Arnhofen$window$y))
Awin <- st_multipoint(as.matrix(Arnhofen$window$x, Arnhofen$window$y, col = 2))
Awin <- st_multipoint(as.matrix(Arnhofen$window$x, Arnhofen$window$y, ncol = 2))
Awin <- st_multipoint(as.matrix(c(Arnhofen$window$x, Arnhofen$window$y), ncol = 2))
Awin <- st_multipoint(as.matrix(c(Arnhofen$window, ncol = 2))
Awin <- st_multipoint(as.matrix(c(Arnhofen$window, ncol = 2)) )
Awin <- st_multipoint(as.matrix(c(Arnhofen$window, ncol = 2)) )
Amatrix <- as.matrix(Arnhofen$window$id, Arnhofen$window$x, Arnhofen$window$y, ncol = 3)
Amatrix <- as.matrix(Arnhofen$window$x, Arnhofen$window$y, ncol = 2)
Awin <- st_multipoint(Amatrix)
Awin <- st_multipoint(Amatrix, ncol(2))
multipoint = st_multipoint(matrix(c(1, 3, 5, 1, 3, 1), ncol = 2))
Awin <- st_multipoint(Amatrix, ncol = 2)
Awin <- st_multipoint(Amatrix)
Amatrix <- matrix(Arnhofen$window$x, Arnhofen$window$y, ncol = 2)
Awin <- st_multipoint(Amatrix)
win <- st_cast(Awin, "POLYGON")
mapClusters(shape = Awin,  map_name = "Arnhofen", source_file_name = "Source file ist archdata, Arnhofen", dpi = 200)
plot(Awin)
plot(win)
plot(Arnhofen$window$x, Arnhofen$window$y)
plotClustFreq()
Amatrix <- matrix(Arnhofen$window$x, Arnhofen$window$y, ncol = 2)
library(percopackage)
percolate(A,limit = 70, radius_unit = 1, upper_radius = 50, lower_radius = 10, step_value = 10)
plotClustFreq()
plotClustFreq(source_file_name = "Arnhofen, archpackage")
c <- plotClustFreq(source_file_name = "Arnhofen, archpackage")
getwd()
percolate(A,limit = 20, radius_unit = 1, upper_radius = 15, lower_radius = 1, step_value = 5)
plotClustFreq(source_file_name = "Arnhofen, archpackage")
library(readODS)
d <- read_ods("noten_fuer_auswertung.ods")
d <- read_ods("/home/sophie/ownCloud/R-Kurs_Koblenz/Prüfungen/noten_fuer_auswertung.ods")
d <- read_ods("/home/sophie/ownCloud/R-Kurs_Koblenz/Prüfungen/noten_fuer_auswertung.ods")
hist(d$Note)
library(ggplot2)
ggplot(data = d)+
geom_histogram(aes(x = Note), binwidth = 0.3)
ggplot(data = d)+
geom_histogram(aes(x = Note), binwidth = 0.3)+
scale_x_continuous(limits = (5.0,0.0))
ggplot(data = d)+
geom_histogram(aes(x = Note), binwidth = 0.3)+
scale_x_continuous(limits = (5.0))
ggplot(data = d)+
geom_histogram(aes(x = Note), binwidth = 0.3)+
scale_x_continuous(limits = (5.0, 0.0))
ggplot(data = d)+
geom_histogram(aes(x = Note), binwidth = 0.3)+
scale_x_reverse()
ggplot(data = d)+
geom_histogram(aes(x = Note, fill = Geschlecht), binwidth = 0.3)+
scale_x_reverse()
ggplot(data = d)+
geom_histogram(aes(x = Note, fill = Geschlecht, alpha = 0.5), binwidth = 0.3)+
scale_x_reverse()
ggplot(data = d)+
geom_density(aes(x = Note, fill = Geschlecht, alpha = 0.5), binwidth = 0.3)+
scale_x_reverse()
ggplot(data = d)+
geom_density(aes(x = Note, fill = Geschlecht, alpha = 0.5))+
scale_x_reverse()+
scale_alpha()
ggplot(data = d)+
geom_density(aes(x = Note, fill = Geschlecht), alpha = 0.5)+
scale_x_reverse()+
scale_alpha()
d_w <- subset(d, d$Geschlecht == "w")
d_m <- subset(d, d$Geschlecht == "m")
ks.test(d_w$Note, d_m$Note)
ks.test(d_w$Note, d_m$Note, alternative = "greater")
wilcox.test(d_w, d_m)
wilcox.test(d_w$Note, d_m$Note)
ggplot(data = d)+
geom_hist(aes(x = Note, fill = Datensatz), alpha = 0.5)+
scale_x_reverse()
ggplot(data = d)+
geom_histogram(aes(x = Note, fill = Datensatz), alpha = 0.5)+
scale_x_reverse()
ggplot(data = d)+
geom_histogram(aes(x = Note, fill = Datensatze), alpha = 0.5)+
scale_x_reverse()
ggplot(data = d)+
geom_bar(aes(x = Note, fill = Datensatze), alpha = 0.5)+
scale_x_reverse()
ggplot(data = d)+
geom_bar(aes(x = Datensatz, fill = Note), alpha = 0.5)+
scale_x_reverse()
ggplot(data = d)+
geom_bar(aes(x = Datensatze, fill = Note), alpha = 0.5)+
scale_x_reverse()
ggplot(data = d)+
geom_density(aes(x = Note, fill = Datensatze), alpha = 0.5)+
scale_x_reverse()
rrtools::create_compendium("/home/sophie/R/n40_stud_umfrage")
rrtools::create_compendium("/home/sophie/R/n4o_stud_umfrage")
rrtools::use_compendium("/home/sophie/R/n4o_stud_umfrage")
rrtools::use_compendium("/home/sophie/R/n4ostudumfrage")
install.packages("haven")
library(haven)
dataset = read_sav("/home/sophie/ownCloud/2020-21_R_Kurs_Köln/Siegmund_Daten/0_Hafner-Suter-2003_n20y-Neol.sav")
View(dataset)
dataset2 = read_sav("/home/sophie/ownCloud/2020-21_R_Kurs_Köln/Siegmund_Daten/0_Knochen_CHganz.sav")
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(archdata)
library(ggpubr)
knitr::opts_chunk$set(echo = TRUE)
library(archdata)
data("BACups")
data("BACups")
BACups_sa <- subset(BACups, BACups$Phase == "Subapennine")
BACups_pa <- subset(BACups, BACups$Phase == "Protoapennine")
library(ggpubr)
library(archdata)
library(ggplot2)
library(ggplot2)
library(archdata)
library(ggpubr)
data("BACups")
BACups_sa <- subset(BACups, BACups$Phase == "Subapennine")
BACups_pa <- subset(BACups, BACups$Phase == "Protoapennine")
shapiro.test(BACups_pa$H)
shapiro.test(BACups_sa$H)
wilcox.test(BACups_pa$H, BACups_sa$H)
BACups$RDSD <- BACups$RD / BACups$SD
BACups_pa$RDSD <- BACups_pa$RD / BACups_pa$SD
BACups_sa$RDSD <- BACups_sa$RD / BACups_sa$SD
ggplot()+
geom_boxplot(data = BACups_pa, aes(y = RDSD, x = "Protoapennine"), col = "blue")+
geom_boxplot(data = BACups_sa, aes(y = RDSD, x = "Subapennine"), col = "red")
var.test(x = BACups_pa$RDSD,
y = BACups_sa$RDSD,
alternative = "two.sided")
t.test(x = BACups_pa$RDSD,
y = BACups_sa$RDSD,
alternative = "two.sided")
for (i in c(1:nrow(BACups))) {
BACups$maxD[i]  <- max(BACups$RD[i], BACups$SD[i], BACups$ND[i])
}
for (i in c(1:nrow(BACups_pa))) {
BACups_pa$maxD[i]  <- max(BACups_pa$RD[i], BACups_pa$SD[i], BACups_pa$ND[i])
}
for (i in c(1:nrow(BACups_sa))) {
BACups_sa$maxD[i]  <- max(BACups_sa$RD[i], BACups_sa$SD[i], BACups_sa$ND[i])
}
ggplot()+
geom_boxplot(data = BACups_pa, aes(y = maxD, x = "Protoapennine"), col = "blue")+
geom_boxplot(data = BACups_sa, aes(y = maxD, x = "Subapennine"), col = "red")
shapiro.test(BACups_pa$maxD)
shapiro.test(BACups_sa$maxD)
BACups_pa$G <- BACups_pa$maxD / BACups_pa$H
BACups_sa$G <- BACups_sa$maxD / BACups_sa$H
ggplot()+
geom_boxplot(data = BACups_pa, aes(y = G, x = "Protoapennine"), col = "blue")+
geom_boxplot(data = BACups_sa, aes(y = G, x = "Subapennine"), col = "red")
shapiro.test(BACups_sa$G)
shapiro.test(BACups_pa$G)
var.test(x = BACups_pa$G,
y = BACups_sa$G,
alternative = "two.sided")
t.test(x = BACups_pa$G,
y = BACups_sa$G,
alternative = "two.sided")
ggplot()+
geom_boxplot(data = BACups_pa, aes(y = NH, x = "Protoapennine"), col = "blue")+
geom_boxplot(data = BACups_sa, aes(y = NH, x = "Subapennine"), col = "red")
shapiro.test(BACups_pa$NH)
shapiro.test(BACups_sa$NH)
var.test(x = BACups_pa$NH,
y = BACups_sa$NH,
alternative = "two.sided")
t.test(x = BACups_pa$NH,
y = BACups_sa$NH,
alternative = "two.sided")
knitr::opts_chunk$set(echo = TRUE)
BacProto <- subset(BACups, BACups$Phase == "Protoapennine")
# Shapiro Test 1
shapiro.test(BacProto$H)
# Shapiro Test 2
shapiro.test(BacSub$H)
BacSub   <- subset(BACups, BACups$Phase == "Subapennine")
# Shapiro Test 2
shapiro.test(BacSub$H)
# Shapiro Test 1
shapiro.test(BacProto$H)
# Shapiro Test 1
shapiro.test(BacProto$H)
# Shapiro Test 2
shapiro.test(BacSub$H)
# F-Test
var.test(x = BacProto$H,
y = BacSub$H,
alternative = "two.sided")
BACups$RDSD <- BACups$RD / BACups$SD
BacProto$RDSD <- BacProto$RD / BacProto$SD
BacSub$RDSD   <- BacSub$RD / BacSub$SD
ggplot()+
geom_boxplot(data = BacProto, aes(y = RDSD, x = "protoapennin"), col = "blue")+
geom_boxplot(data = BacSub, aes(y = RDSD, x = "subapennin"), col = "red")
#test auf Normalverteilung
shapiro.test(BacProto$RDSD)
shapiro.test(BacSub$RDSD)
t.test(x = BacProto$RDSD,
y = BacSub$RDSD,
alternative = "two.sided")
for (i in c(1:nrow(BACups))) {
BACups$maxD[i]  <- max(BACups$RD[i], BACups$SD[i], BACups$ND[i])
}
BacProto <- subset(BACups, BACups$Phase == "Protoapennine")
BacSub   <- subset(BACups, BACups$Phase == "Subapennine")
ggplot()+
geom_boxplot(data = BacProto, aes(y = maxD, x = "Protoapennine"), col = "blue")+
geom_boxplot(data = BacSub, aes(y = maxD, x = "Subapennine"), col = "red")
BACups$DH <- BACups$maxD / BACups$H
BacProto$DH <- BacProto$maxD / BacProto$H
BacSub$DH   <- BacSub$maxD / BacSub$H
ggplot()+
geom_boxplot(data = BacProto, aes(y = DH, x = "Protoapennine"), col = "blue")+
geom_boxplot(data = BacSub, aes(y = DH, x = "Subapennine"), col = "red")
ggplot()+
geom_boxplot(data = BacProto, aes(y = NH, x = "Protoapennine"), col = "blue")+
geom_boxplot(data = BacSub, aes(y = NH, x = "Subapennine"), col = "red")
shapiro.test(BACups$NH)
t.test(x = BacProto$NH,
y = BacSub$NH,
alternative = "two.sided")
library(archdata)
data("BACups")
BACups_pa <- subset(BACups, BACups$Phase == "Protoapennine")
BACups_sa <- subset(BACups, BACups$Phase == "Subapennine")
shapiro.test(BACups_pa$H)
shapiro.test(BACups_sa$H)
BACups$RDSD <- BACups$RD / BACups$SD
ggplot(data = BACups)+
geom_boxplot(aes(x = Phase, y = RDSD)) +
labs(x ="Phasen",
y ="Verhältnis Randdurchmesser/Schulterdurchmesser",
title = "Verhältnis RD/ SD der zwei Phasen im Vergleich")+
theme_bw()
BACups_paRDSD <- subset(BACups, BACups$Phase == "Protoapennine")
BACups_saRDSD <- subset(BACups, BACups$Phase == "Subapennine")
shapiro.test(BACups_paRDSD$RDSD)
shapiro.test(BACups_saRDSD$RDSD)
for (i in c(1:nrow(BACups))) {
BACups$maxD[i]  <- max(BACups$RD[i], BACups$SD[i], BACups$ND[i])
}
BACups_pa3 <- subset(BACups, BACups$Phase == "Protoapennine")
BACups_sa3 <- subset(BACups, BACups$Phase == "Subapennine")
shapiro.test(BACups_pa3$maxD)
shapiro.test(BACups_sa3$maxD)
for (i in c(1:nrow(BACups))) {
BACups$maxD[i]  <- max(BACups$RD[i], BACups$SD[i], BACups$ND[i])
}
wilcox.test(BACups_pa3$maxD, BACups_sa3$maxD)
ggplot(data = BACups)+
geom_boxplot(aes(x = Phase, y = maxD)) +
labs(x ="Phasen",
y ="maximale Durchmesser",
title = "maximale Durchmesser der zwei Phasen im Vergleich")+
theme_bw()
BACups$maxDH <- BACups$maxD / BACups$H
BACups_pa4 <- subset(BACups, BACups$Phase == "Protoapennine")
BACups_sa4 <- subset(BACups, BACups$Phase == "Subapennine")
shapiro.test(BACups_pa4$maxDH)
shapiro.test(BACups_sa4$maxDH)
wilcox.test(BACups_pa4$maxDH, BACups_sa4$maxDH)
ggplot(data = BACups)+
geom_boxplot(aes(x = Phase, y = NH)) +
labs(x ="Phasen",
y ="Nackenhöhe",
title = "Nackenhöhe der zwei Phasen im Vergleich")+
theme_bw()
shapiro.test(BACups_pa$NH)
shapiro.test(BACups_sa$NH)
wilcox.test(BACups_pa$NH, BACups_sa$NH)
ks.test(BACups_pa$NH, BACups_sa$NH, alternative = "greater")
knitr::opts_chunk$set(echo = TRUE)
daten <- read.csv2(file="Desktop:Bsp_Graeber.csv", header=TRUE)
daten <- read.csv2(file="Bsp_Graeber.csv", header=TRUE)
ggplot(data = daten)+
geom_point(aes(x=id,y=age,color=site))
barplot(age)
wilcox.test(sex, height, alternative="two.sided")
ggplot(data = daten)+
geom_point(aes(x=id,y=age,color=site))
library(ggplot2)
ggplot(data = daten)+
geom_point(aes(x=id,y=age,color=site))
Drachen <- read.csv2("/home/sophie/ownCloud/R-Kurs_Koblenz/Drachen_5.csv")
Drachen <- read.csv2("~/home/sophie/ownCloud/R-Kurs_Koblenz/Drachen_5.csv")
Drachen <- read.csv2("~/sophie/ownCloud/R-Kurs_Koblenz/Drachen_5.csv")
Drachen <- read.csv2("/home/sophie/ownCloud/R-Kurs_Koblenz/2021/Prüfungsmaterial/2021_pruefungsdatensaetze/Drachen_5.csv")
Drachen <- read.csv2("/home/sophie/ownCloud/R-Kurs_Koblenz/2021/Prüfungsmaterial/2021_pruefungsdatensaetze/Daten_Drachen_5.csv")
GemeinerGrünling <- subset(Drachen, Drachen$Art == "Gemeiner Walisischer Grünling")
Drachen <- read.csv2("/home/sophie/ownCloud/R-Kurs_Koblenz/2021/Prüfungsmaterial/2021_pruefungsdatensaetze/Daten_Drachen_5.csv", sep = ",")
GemeinerGrünling <- subset(Drachen, Drachen$Art == "Gemeiner Walisischer Grünling")
grünling_w <- subset(GemeinerGrünling, GemeinerGrünling$Geschlecht == "F")
View(grünling_w)
Drachen$Geschlecht
library(devtools)
install.packages("/home/sophie/ownCloud/intCAAdigital2021/myexample_0.0.0.9000.tar.gz", repos = NULL, type="source")
library(myexample)
doublemean(c(2,3,4))
myexample::doublemean(c(2,3,4))
install.packages("/home/sophie/ownCloud/intCAAdigital2021/myexample_0.0.0.9000.tar.gz", repos = NULL, type="source")
myexample::doublemean(c(3,4,5))
#Testdaten einladen:
mat <- as.matrix(read.table(file="../data/ca_potterlimes.csv",
sep = "\t",
header=TRUE))
# mat <- as.matrix(read.table(file="CADataInput.dat", header=TRUE))
lm = (length(mat)/3)
prov <- unique(mat[1:lm])
pot <- unique(mat[(lm+1):(2*lm)])
m <- matrix(0,length(prov),length(pot))
rownames(m) <- prov
colnames(m) <- pot
for (i in 1:lm) {
setrow = mat[i,1]
setcol = mat[i,2]
m[setrow, setcol] = as.integer(mat[i,3]) }
## Code von Dirk Seidensticker, Projekt ChronoCongo:
# https://github.com/dirkseidensticker/ChronoCongo
# Correspondance Analysis
# =======================
library("FactoMineR")
library("factoextra")
res.ca <- CA(m, graph = FALSE)
ca.plt.12 <- fviz_ca_biplot(res.ca,
repel = TRUE)
ca.plt.12
mat <- as.matrix(read.table(file="../data/ca_potterlimes.csv",
sep = "\t",
header=TRUE))
setwd("/home/sophie/R/alligator-ca/R/")
mat <- as.matrix(read.table(file="../data/ca_potterlimes.csv",
sep = "\t",
header=TRUE))
lm = (length(mat)/3)
prov <- unique(mat[1:lm])
pot <- unique(mat[(lm+1):(2*lm)])
m <- matrix(0,length(prov),length(pot))
rownames(m) <- prov
colnames(m) <- pot
for (i in 1:lm) {
setrow = mat[i,1]
setcol = mat[i,2]
m[setrow, setcol] = as.integer(mat[i,3]) }
## Code von Dirk Seidensticker, Projekt ChronoCongo:
# https://github.com/dirkseidensticker/ChronoCongo
# Correspondance Analysis
# =======================
library("FactoMineR")
library("factoextra")
res.ca <- CA(m, graph = FALSE)
ca.plt.12 <- fviz_ca_biplot(res.ca,
repel = TRUE)
ca.plt.12
repel = TRUE)
# 2nd and 3rd axes
ca.plt.23 <- fviz_ca_biplot(res.ca,
axes = c(2, 3),
repel = TRUE)
# 3nd and 2rd axes
ca.plt.32 <- fviz_ca_biplot(res.ca,
axes = c(3, 2),
repel = TRUE)
# export coordinates
# ------------------
e_col <- get_ca_col(res.ca)
e_xyz <- e_col[1]$coord[,1:3]
# export eigenvalues 1-3
e_eig <- as.data.frame(res.ca$eig[1:3,])
n_eig <- nrow(res.ca$eig) # Anzahl Eigenvalues für Doku
# data dates einladen
dates <- read.csv2("../data/dates.csv", sep = ",", header = TRUE)
#join dates with ca_m / e
library(dplyr)
e_xyz <- as.data.frame(e_xyz) # für join data frame
e_xyz$name <- as.character(rownames(e_xyz)) # needs names as column
res_ca_dates <- right_join(dates,
e_xyz,
by = c("name" = "name" ),
copy = TRUE)
#Write data from R to a txt file:
#https://www.dataanalytics.org.uk/sending-r-output-to-disk-files/
#http://www.cookbook-r.com/Data_input_and_output/Writing_text_and_output_from_analyses_to_a_file/
sink("../export/SinkCAValues.agt")
cat("#9999 \n")
cat("#true\n")
e_eig # todo: get hashtag vor jede zeile
cat("#data \n")
res_ca_dates
# Stop sending output to file
sink(file = NULL)
ca.plt.32
